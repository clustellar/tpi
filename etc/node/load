#!/bin/bash
DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

DEFAULTENV=$DIR/default.env
NODEENV=$DIR/node.env

if [ -f "$DEFAULTENV" ]; then source $DEFAULTENV; fi
if [ -f "$NODEENV" ]; then source $NODEENV; fi

_write() {
	local key="$1"
	local val="$2"

	if grep -q -E "^${key}=" $NODEENV ; then
		sed -i "s/${key}=.*$/${key}=${val}/" $NODEENV
	else
		echo "${key}=${val}" >> $NODEENV
	fi
}

while [[ $# -gt 0 ]]; do
	key="$1"
	shift
	found=""
	isarray=""

	# if key starts with -- indicating a set field
	[[ "$key" == --* ]] && found="1"
	[[ "$key" == *[] ]] && isarray="1"

	if [ -n "$found" ]; then
		val="$1"
		shift
		envname="$(echo ${key:2} | tr '[:lower:]' '[:upper:]' | tr - _ | tr -d '[]')" # delete --, uppercase, replace - with _

		if $(declare -p ${envname} 2> /dev/null | grep -q '^declare \-a'); then
			isarray="1"
		fi

		if [ -n "$isarray" ]; then
			arr="${envname}[@]" # indirect reference to array must add [@] to variable
			out=""
			for item in "${!arr}"; do
				out+=" $item"
			done
			val="($out $val )"

			eval "${envname}=${val}"
		else
			export ${envname}="$val"
		fi

		_write "${envname}" "$val"
	fi
done

for err in $(grep -E '=$' $NODEENV) ; do
	echo "[ERROR] ${err}null (env variable is not set)"
	exit 1
done

exit 0
